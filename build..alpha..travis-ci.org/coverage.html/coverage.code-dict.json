{"/home/travis/build/npmtest/node-npmtest-eyes/test.js":"/* istanbul instrument in package npmtest_eyes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eyes/lib.npmtest_eyes.js":"/* istanbul instrument in package npmtest_eyes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eyes = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eyes = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eyes/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eyes && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eyes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eyes\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eyes.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_eyes.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eyes.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_eyes.__dirname +\n                    '/lib.npmtest_eyes.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eyes/eyes/lib/eyes.js":"//\n// Eyes.js - a customizable value inspector for Node.js\n//\n//   usage:\n//\n//       var inspect = require('eyes').inspector({styles: {all: 'magenta'}});\n//       inspect(something); // inspect with the settings passed to `inspector`\n//\n//     or\n//\n//       var eyes = require('eyes');\n//       eyes.inspect(something); // inspect with the default settings\n//\nvar eyes = exports,\n    stack = [];\n\neyes.defaults = {\n    styles: {                 // Styles applied to stdout\n        all:     'cyan',      // Overall style applied to everything\n        label:   'underline', // Inspection labels, like 'array' in `array: [1, 2, 3]`\n        other:   'inverted',  // Objects which don't have a literal representation, such as functions\n        key:     'bold',      // The keys in object literals, like 'a' in `{a: 1}`\n        special: 'grey',      // null, undefined...\n        string:  'green',\n        number:  'magenta',\n        bool:    'blue',      // true false\n        regexp:  'green',     // /\\d+/\n    },\n    pretty: true,             // Indent object literals\n    hideFunctions: false,\n    showHidden: false,\n    stream: process.stdout,\n    maxLength: 2048           // Truncate output if longer\n};\n\n// Return a curried inspect() function, with the `options` argument filled in.\neyes.inspector = function (options) {\n    var that = this;\n    return function (obj, label, opts) {\n        return that.inspect.call(that, obj, label,\n            merge(options || {}, opts || {}));\n    };\n};\n\n// If we have a `stream` defined, use it to print a styled string,\n// if not, we just return the stringified object.\neyes.inspect = function (obj, label, options) {\n    options = merge(this.defaults, options || {});\n\n    if (options.stream) {\n        return this.print(stringify(obj, options), label, options);\n    } else {\n        return stringify(obj, options) + (options.styles ? '\\033[39m' : '');\n    }\n};\n\n// Output using the 'stream', and an optional label\n// Loop through `str`, and truncate it after `options.maxLength` has been reached.\n// Because escape sequences are, at this point embeded within\n// the output string, we can't measure the length of the string\n// in a useful way, without separating what is an escape sequence,\n// versus a printable character (`c`). So we resort to counting the\n// length manually.\neyes.print = function (str, label, options) {\n    for (var c = 0, i = 0; i < str.length; i++) {\n        if (str.charAt(i) === '\\033') { i += 4 } // `4` because '\\033[25m'.length + 1 == 5\n        else if (c === options.maxLength) {\n           str = str.slice(0, i - 1) + '…';\n           break;\n        } else { c++ }\n    }\n    return options.stream.write.call(options.stream, (label ?\n        this.stylize(label, options.styles.label, options.styles) + ': ' : '') +\n        this.stylize(str,   options.styles.all, options.styles) + '\\033[0m' + \"\\n\");\n};\n\n// Apply a style to a string, eventually,\n// I'd like this to support passing multiple\n// styles.\neyes.stylize = function (str, style, styles) {\n    var codes = {\n        'bold'      : [1,  22],\n        'underline' : [4,  24],\n        'inverse'   : [7,  27],\n        'cyan'      : [36, 39],\n        'magenta'   : [35, 39],\n        'blue'      : [34, 39],\n        'yellow'    : [33, 39],\n        'green'     : [32, 39],\n        'red'       : [31, 39],\n        'grey'      : [90, 39]\n    }, endCode;\n\n    if (style && codes[style]) {\n        endCode = (codes[style][1] === 39 && styles.all) ? codes[styles.all][0]\n                                                         : codes[style][1];\n        return '\\033[' + codes[style][0] + 'm' + str +\n               '\\033[' + endCode + 'm';\n    } else { return str }\n};\n\n// Convert any object to a string, ready for output.\n// When an 'array' or an 'object' are encountered, they are\n// passed to specialized functions, which can then recursively call\n// stringify().\nfunction stringify(obj, options) {\n    var that = this, stylize = function (str, style) {\n        return eyes.stylize(str, options.styles[style], options.styles)\n    }, index, result;\n\n    if ((index = stack.indexOf(obj)) !== -1) {\n        return stylize(new(Array)(stack.length - index + 1).join('.'), 'special');\n    }\n    stack.push(obj);\n\n    result = (function (obj) {\n        switch (typeOf(obj)) {\n            case \"string\"   : obj = stringifyString(obj.indexOf(\"'\") === -1 ? \"'\" + obj + \"'\"\n                                                                            : '\"' + obj + '\"');\n                              return stylize(obj, 'string');\n            case \"regexp\"   : return stylize('/' + obj.source + '/', 'regexp');\n            case \"number\"   : return stylize(obj + '',    'number');\n            case \"function\" : return options.stream ? stylize(\"Function\", 'other') : '[Function]';\n            case \"null\"     : return stylize(\"null\",      'special');\n            case \"undefined\": return stylize(\"undefined\", 'special');\n            case \"boolean\"  : return stylize(obj + '',    'bool');\n            case \"date\"     : return stylize(obj.toUTCString());\n            case \"array\"    : return stringifyArray(obj,  options, stack.length);\n            case \"object\"   : return stringifyObject(obj, options, stack.length);\n        }\n    })(obj);\n\n    stack.pop();\n    return result;\n};\n\n// Escape invisible characters in a string\nfunction stringifyString (str, options) {\n    return str.replace(/\\\\/g, '\\\\\\\\')\n              .replace(/\\n/g, '\\\\n')\n              .replace(/[\\u0001-\\u001F]/g, function (match) {\n                  return '\\\\0' + match[0].charCodeAt(0).toString(8);\n              });\n}\n\n// Convert an array to a string, such as [1, 2, 3].\n// This function calls stringify() for each of the elements\n// in the array.\nfunction stringifyArray(ary, options, level) {\n    var out = [];\n    var pretty = options.pretty && (ary.length > 4 || ary.some(function (o) {\n        return (o !== null && typeof(o) === 'object' && Object.keys(o).length > 0) ||\n               (Array.isArray(o) && o.length > 0);\n    }));\n    var ws = pretty ? '\\n' + new(Array)(level * 4 + 1).join(' ') : ' ';\n\n    for (var i = 0; i < ary.length; i++) {\n        out.push(stringify(ary[i], options));\n    }\n\n    if (out.length === 0) {\n        return '[]';\n    } else {\n        return '[' + ws\n                   + out.join(',' + (pretty ? ws : ' '))\n                   + (pretty ? ws.slice(0, -4) : ws) +\n               ']';\n    }\n};\n\n// Convert an object to a string, such as {a: 1}.\n// This function calls stringify() for each of its values,\n// and does not output functions or prototype values.\nfunction stringifyObject(obj, options, level) {\n    var out = [];\n    var pretty = options.pretty && (Object.keys(obj).length > 2 ||\n                                    Object.keys(obj).some(function (k) { return typeof(obj[k]) === 'object' }));\n    var ws = pretty ? '\\n' + new(Array)(level * 4 + 1).join(' ') : ' ';\n\n    var keys = options.showHidden ? Object.keys(obj) : Object.getOwnPropertyNames(obj);\n    keys.forEach(function (k) {\n        if (Object.prototype.hasOwnProperty.call(obj, k) \n          && !(obj[k] instanceof Function && options.hideFunctions)) {\n            out.push(eyes.stylize(k, options.styles.key, options.styles) + ': ' +\n                     stringify(obj[k], options));\n        }\n    });\n\n    if (out.length === 0) {\n        return '{}';\n    } else {\n        return \"{\" + ws\n                   + out.join(',' + (pretty ? ws : ' '))\n                   + (pretty ? ws.slice(0, -4) : ws) +\n               \"}\";\n   }\n};\n\n// A better `typeof`\nfunction typeOf(value) {\n    var s = typeof(value),\n        types = [Object, Array, String, RegExp, Number, Function, Boolean, Date];\n\n    if (s === 'object' || s === 'function') {\n        if (value) {\n            types.forEach(function (t) {\n                if (value instanceof t) { s = t.name.toLowerCase() }\n            });\n        } else { s = 'null' }\n    }\n    return s;\n}\n\nfunction merge(/* variable args */) {\n    var objs = Array.prototype.slice.call(arguments);\n    var target = {};\n\n    objs.forEach(function (o) {\n        Object.keys(o).forEach(function (k) {\n            if (k === 'styles') {\n                if (! o.styles) {\n                    target.styles = false;\n                } else {\n                    target.styles = {}\n                    for (var s in o.styles) {\n                        target.styles[s] = o.styles[s];\n                    }\n                }\n            } else {\n                target[k] = o[k];\n            }\n        });\n    });\n    return target;\n}\n\n"}